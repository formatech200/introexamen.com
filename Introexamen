<!doctype html>
<html lang="fr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Examen — Introduction à la gestion de projet</title>
<style>
  body{font-family:system-ui,Segoe UI,Roboto,Arial;margin:20px;max-width:900px}
  h1{color:#0a3}
  .q{margin:14px 0;padding:10px;border:1px solid #ddd;border-radius:8px}
  .btn{padding:10px 16px;border-radius:8px;border:0;background:#0a7;color:#fff;cursor:pointer}
  .result{margin-top:18px;padding:12px;border-radius:8px;background:#f3f3f3}
</style>
</head>
<body>
  <h1>Examen — Introduction à la gestion de projet</h1>
  <p>Remplis le formulaire, clique <strong>Soumettre</strong> — la note sera calculée et un certificat te sera envoyé par e-mail si tu réussis.</p>

  <form id="examForm">
    <div>
      <label>Nom complet:<br>
        <input required name="fullname" type="text" style="width:100%;padding:8px" />
      </label>
    </div>

    <div>
      <label>Email (pour recevoir le certificat):<br>
        <input required name="email" type="email" style="width:100%;padding:8px" />
      </label>
    </div>

    <hr>

    <div class="q">
      <strong>1. Selon le PMI, un projet est :</strong><br>
      <label><input type="radio" name="q1" value="a"> a) Une activité répétitive</label><br>
      <label><input type="radio" name="q1" value="b"> b) Une entreprise temporaire visant à produire un résultat unique</label><br>
      <label><input type="radio" name="q1" value="c"> c) Un plan sans début ni fin</label><br>
      <label><input type="radio" name="q1" value="d"> d) Un ensemble d’objectifs permanents</label>
    </div>

    <div class="q">
      <strong>2. Les trois contraintes principales :</strong><br>
      <label><input type="radio" name="q2" value="a"> a) Temps – Qualité – Communication</label><br>
      <label><input type="radio" name="q2" value="b"> b) Coût – Temps – Qualité</label><br>
      <label><input type="radio" name="q2" value="c"> c) Ressources – Temps – Objectifs</label>
    </div>

    <div class="q">
      <strong>3. Le promoteur d’un projet est :</strong><br>
      <label><input type="radio" name="q3" value="a"> a) Celui qui exécute les tâches</label><br>
      <label><input type="radio" name="q3" value="b"> b) Celui qui finance ou commande le projet</label><br>
      <label><input type="radio" name="q3" value="c"> c) Celui qui utilise le résultat</label>
    </div>

    <div class="q">
      <strong>4. Le cycle de vie commence par :</strong><br>
      <label><input type="radio" name="q4" value="a"> a) Planification</label><br>
      <label><input type="radio" name="q4" value="b"> b) Clôture</label><br>
      <label><input type="radio" name="q4" value="c"> c) Définition</label><br>
      <label><input type="radio" name="q4" value="d"> d) Exécution</label>
    </div>

    <div class="q">
      <strong>5. Le diagramme de Gantt sert à :</strong><br>
      <label><input type="radio" name="q5" value="a"> a) Suivre les dépenses</label><br>
      <label><input type="radio" name="q5" value="b"> b) Visualiser la planification des tâches</label><br>
      <label><input type="radio" name="q5" value="c"> c) Mesurer la qualité</label>
    </div>

    <div style="margin-top:12px">
      <button class="btn" type="submit">Soumettre</button>
    </div>

    <div class="result" id="result" style="display:none"></div>
  </form>

<script>
// clé de correction
const answers = { q1:'b', q2:'b', q3:'b', q4:'c', q5:'b' };
const scriptUrl = 'SCRIPT_WEB_APP_URL'; // <-- change ici

document.getElementById('examForm').addEventListener('submit', async (e)=>{
  e.preventDefault();
  const f = new FormData(e.target);
  const name = f.get('fullname').trim();
  const email = f.get('email').trim();

  // Calcul note
  let total = 0, max = Object.keys(answers).length;
  let details = {};
  for(const k of Object.keys(answers)){
    const given = f.get(k);
    if(given && given === answers[k]) { total++; details[k]=true; } else details[k]=false;
  }
  const score = Math.round((total/max)*100);

  // Détermine réussite (par ex >= 70%)
  const passed = score >= 70;

  document.getElementById('result').style.display = 'block';
  document.getElementById('result').innerHTML =
    `<strong>${name}</strong> — Score: <strong>${score}%</strong> (${total}/${max})<br>` +
    `Résultat: <strong>${passed ? 'Réussi' : 'Non réussi'}</strong><br>` +
    `Un e-mail sera envoyé à ${email} si tu as réussi (si Autocrat est configuré).`;

  // Prépare payload à envoyer vers Google Apps Script
  const payload = {
    fullname: name,
    email: email,
    score: score,
    passed: passed,
    date: new Date().toISOString(),
    answers: {
      q1: f.get('q1'), q2: f.get('q2'), q3: f.get('q3'), q4: f.get('q4'), q5: f.get('q5')
    }
  };

  // Envoi (POST) au script serveur
  try{
    const resp = await fetch(scriptUrl, {
      method:'POST',
      headers:{'Content-Type':'application/json'},
      body: JSON.stringify(payload),
      mode:'cors'
    });
    const j = await resp.json();
    console.log('Server response:', j);
  }catch(err){
    console.error('Erreur en envoyant au serveur:', err);
    // Ne bloque pas l'utilisateur : affiche message d'erreur mais laisse résultat visible
    const n = document.createElement('div'); n.style.color='crimson';
    n.textContent = 'Erreur: impossible d’enregistrer les résultats (vérifie SCRIPT_WEB_APP_URL).';
    document.getElementById('result').appendChild(n);
  }

});
</script>
</body>
</html>
